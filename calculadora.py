# calculadora.py
# Este arquivo cont√©m nossa calculadora simples que ser√° exposta via MCP

# Importamos a biblioteca 'logging' para registrar informa√ß√µes sobre o que est√° acontecendo
# √â como um "di√°rio" do programa que nos ajuda a entender o que est√° funcionando
import logging

# Configuramos o sistema de logging para mostrar informa√ß√µes √∫teis
# Isso nos ajudar√° a debugar problemas se algo der errado
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CalculadoraSimples:
    """
    Esta √© nossa classe Calculadora.
    Uma classe √© como um "molde" ou "blueprint" que define como nossa calculadora funciona.
    
    Pense na classe como a "receita" de uma calculadora, e quando criamos uma inst√¢ncia
    da classe, √© como se estiv√©ssemos "assando" uma calculadora real usando essa receita.
    """
    
    def __init__(self):
        """
        Este √© o m√©todo __init__ (inicializador).
        Ele √© executado automaticamente quando criamos uma nova calculadora.
        √â como "ligar" a calculadora pela primeira vez.
        """
        logger.info("Calculadora inicializada com sucesso!")
        print("Calculadora MCP iniciada - Pronta para calcular!")
    
    def somar(self, numero1: float, numero2: float) -> float:
        """
        Fun√ß√£o para somar dois n√∫meros.
        
        Par√¢metros:
        - numero1 (float): O primeiro n√∫mero a ser somado
        - numero2 (float): O segundo n√∫mero a ser somado
        
        Retorna:
        - float: O resultado da soma
        
        Exemplo: somar(5, 3) retorna 8
        """
        # Registramos no log que a opera√ß√£o est√° sendo executada
        logger.info(f"Executando soma: {numero1} + {numero2}")
        
        # Realizamos a opera√ß√£o matem√°tica
        resultado = numero1 + numero2
        
        # Registramos o resultado no log
        logger.info(f"Resultado da soma: {resultado}")
        
        # Retornamos o resultado
        return resultado
    
    def subtrair(self, numero1: float, numero2: float) -> float:
        """
        Fun√ß√£o para subtrair dois n√∫meros.
        
        Par√¢metros:
        - numero1 (float): O n√∫mero do qual vamos subtrair (minuendo)
        - numero2 (float): O n√∫mero que vamos subtrair (subtraendo)
        
        Retorna:
        - float: O resultado da subtra√ß√£o
        
        Exemplo: subtrair(10, 3) retorna 7
        """
        # Registramos no log que a opera√ß√£o est√° sendo executada
        logger.info(f"Executando subtra√ß√£o: {numero1} - {numero2}")
        
        # Realizamos a opera√ß√£o matem√°tica
        resultado = numero1 - numero2
        
        # Registramos o resultado no log
        logger.info(f"Resultado da subtra√ß√£o: {resultado}")
        
        # Retornamos o resultado
        return resultado
    
    def dividir(self, numero1: float, numero2: float) -> float:
        """
        Fun√ß√£o para dividir dois n√∫meros.
        
        Esta fun√ß√£o inclui prote√ß√£o contra divis√£o por zero, que √© um erro matem√°tico.
        Dividir por zero √© imposs√≠vel e causaria um erro no programa.
        
        Par√¢metros:
        - numero1 (float): O n√∫mero que ser√° dividido (dividendo)
        - numero2 (float): O n√∫mero pelo qual vamos dividir (divisor)
        
        Retorna:
        - float: O resultado da divis√£o
        
        Levanta:
        - ValueError: Se tentarmos dividir por zero
        
        Exemplo: dividir(10, 2) retorna 5
        """
        # Registramos no log que a opera√ß√£o est√° sendo executada
        logger.info(f"Executando divis√£o: {numero1} √∑ {numero2}")
        
        # Verificamos se o segundo n√∫mero √© zero
        # Se for, n√£o podemos dividir e precisamos avisar sobre o erro
        if numero2 == 0:
            error_msg = "Erro: N√£o √© poss√≠vel dividir por zero!"
            logger.error(error_msg)
            # Levantamos uma exce√ß√£o (erro) com uma mensagem explicativa
            raise ValueError(error_msg)
        
        # Se chegamos aqui, √© seguro fazer a divis√£o
        resultado = numero1 / numero2
        
        # Registramos o resultado no log
        logger.info(f"Resultado da divis√£o: {resultado}")
        
        # Retornamos o resultado
        return resultado
    
    def info(self) -> str:
        """
        Fun√ß√£o que retorna informa√ß√µes sobre a calculadora.
        
        Retorna:
        - str: Uma string com informa√ß√µes sobre as opera√ß√µes dispon√≠veis
        """
        info_text = """
        üßÆ Calculadora MCP - Informa√ß√µes:
        
        Opera√ß√µes dispon√≠veis:
        1. Somar: Adiciona dois n√∫meros
        2. Subtrair: Subtrai o segundo n√∫mero do primeiro
        3. Dividir: Divide o primeiro n√∫mero pelo segundo (protegido contra divis√£o por zero)
        
        Todas as opera√ß√µes aceitam n√∫meros decimais (float).
        """
        return info_text

# Fun√ß√£o de teste para verificar se nossa calculadora est√° funcionando
def testar_calculadora():
    """
    Esta fun√ß√£o testa nossa calculadora para garantir que est√° funcionando corretamente.
    √â como fazer um "teste de qualidade" antes de usar a calculadora de verdade.
    """
    print("üß™ Iniciando testes da calculadora...")
    
    # Criamos uma inst√¢ncia (uma "c√≥pia") da nossa calculadora
    calc = CalculadoraSimples()
    
    # Testamos cada opera√ß√£o
    try:
        # Teste da soma
        resultado_soma = calc.somar(10, 5)
        print(f"‚úÖ Teste soma: 10 + 5 = {resultado_soma}")
        
        # Teste da subtra√ß√£o
        resultado_subtracao = calc.subtrair(10, 3)
        print(f"‚úÖ Teste subtra√ß√£o: 10 - 3 = {resultado_subtracao}")
        
        # Teste da divis√£o
        resultado_divisao = calc.dividir(15, 3)
        print(f"‚úÖ Teste divis√£o: 15 √∑ 3 = {resultado_divisao}")
        
        # Teste da prote√ß√£o contra divis√£o por zero
        print("üß™ Testando prote√ß√£o contra divis√£o por zero...")
        try:
            calc.dividir(10, 0)
        except ValueError as e:
            print(f"‚úÖ Prote√ß√£o funcionando: {e}")
        
        print("üéâ Todos os testes passaram! A calculadora est√° funcionando corretamente.")
        
    except Exception as e:
        print(f"‚ùå Erro durante os testes: {e}")

# Esta parte s√≥ executa se rodarmos este arquivo diretamente
# (n√£o quando ele for importado por outro arquivo)
if __name__ == "__main__":
    print("üöÄ Executando calculadora.py diretamente")
    testar_calculadora()