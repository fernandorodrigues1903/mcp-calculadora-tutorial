# ==============================================================================
# SERVIDOR MCP DA CALCULADORA - VERS√ÉO FINAL E CORRIGIDA
# ==============================================================================
# Este arquivo Python cria um servidor local que exp√µe as funcionalidades de
# uma calculadora simples como "ferramentas" que podem ser chamadas pelo Gemini.
#
# A estrutura deste c√≥digo foi ajustada para ser compat√≠vel com a forma como
# a biblioteca MCP gerencia seus pr√≥prios processos ass√≠ncronos internamente.

# --- 1. IMPORTA√á√ÉO DAS BIBLIOTECAS ---
# Aqui, importamos todos os "kits de ferramentas" (bibliotecas) que nosso programa precisa.

import asyncio
# 'asyncio' √© a biblioteca do Python para "programa√ß√£o ass√≠ncrona".
# Nossas ferramentas (ex: somar_numeros) s√£o definidas como 'async', pois
# a biblioteca MCP espera que elas possam realizar tarefas demoradas sem
# travar o servidor. O pr√≥prio servidor MCP ir√° gerenciar a execu√ß√£o
# dessas fun√ß√µes ass√≠ncronas.

import logging
# 'logging' √© um sistema para registrar mensagens e eventos que acontecem no programa.
# √â mais poderoso que um simples 'print()', pois permite classificar mensagens por
# import√¢ncia (INFO para informa√ß√£o, ERROR para erros, etc.).

from typing import Any, Dict
# 'typing' nos ajuda a usar "dicas de tipo" (type hints). Elas nos permitem anotar
# qual tipo de dado uma vari√°vel ou fun√ß√£o espera (ex: float, str).
# Isso n√£o muda como o c√≥digo roda, mas o torna mais claro para quem l√™ e ajuda
# a encontrar erros durante o desenvolvimento.

import sys
# 'sys' fornece acesso a vari√°veis e fun√ß√µes do sistema. Vamos us√°-lo para
# ler argumentos da linha de comando (por exemplo, para rodar um modo de "teste").

# --- 2. IMPORTA√á√ÉO DOS M√ìDULOS DO NOSSO PROJETO ---
# Agora importamos as partes espec√≠ficas do nosso projeto.

from mcp.server.fastmcp import FastMCP
# 'FastMCP' √© a classe principal da biblioteca MCP que usaremos para criar nosso servidor.
# Uma "classe" √© como uma planta ou um projeto para criar objetos.

from calculadora import CalculadoraSimples
# 'CalculadoraSimples' √© a nossa pr√≥pria classe, definida em outro arquivo
# (provavelmente 'calculadora.py'), que cont√©m a l√≥gica das opera√ß√µes matem√°ticas.

# --- 3. CONFIGURA√á√ÉO INICIAL ---
# Bloco de c√≥digo para prepara√ß√µes iniciais antes de o servidor rodar.

# Configura o sistema de logging para exibir mensagens a partir do n√≠vel INFO.
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__) # Cria um objeto "logger" para este arquivo.

# Criamos as "inst√¢ncias" dos objetos que vamos usar. Uma inst√¢ncia √© um objeto
# funcional criado a partir do "projeto" de uma classe.
mcp_server = FastMCP("calculadora-mcp") # Inst√¢ncia do servidor, com um nome √∫nico.
calculadora = CalculadoraSimples()      # Inst√¢ncia da nossa calculadora.

# --- 4. DEFINI√á√ÉO DAS FERRAMENTAS (TOOLS) MCP ---
# Esta √© a parte principal. Cada fun√ß√£o aqui se tornar√° um comando que o Gemini
# pode executar. As fun√ß√µes s√£o 'async def' porque o servidor MCP as executa
# em seu pr√≥prio loop de eventos ass√≠ncrono.

# O '@mcp_server.tool()' √© um "decorador". Ele "decora" ou "embrulha" nossa fun√ß√£o,
# adicionando a ela a capacidade de ser reconhecida e exposta pelo servidor MCP.
@mcp_server.tool()
async def somar_numeros(numero1: float, numero2: float) -> float:
    """
    Esta √© uma 'docstring'. Ela descreve o que a ferramenta faz, seus argumentos
    e o que ela retorna. O Gemini l√™ esta docstring para entender como usar a ferramenta.
    √â fundamental que ela seja clara e precisa.

    Args:
        numero1 (float): O primeiro n√∫mero para a soma.
        numero2 (float): O segundo n√∫mero para a soma.

    Returns:
        float: O resultado da soma.
    """
    # Usamos o logger para registrar o que est√° acontecendo internamente.
    # Essas mensagens aparecer√£o no console onde o servidor est√° rodando.
    logger.info(f"Ferramenta 'somar_numeros' chamada com: {numero1}, {numero2}")

    # Chamamos o m√©todo real da nossa classe Calculadora para fazer o c√°lculo.
    resultado = calculadora.somar(numero1, numero2)

    # O valor que a fun√ß√£o 'return'a √© o que ser√° enviado de volta para o Gemini como resposta.
    return resultado

@mcp_server.tool()
async def subtrair_numeros(numero1: float, numero2: float) -> float:
    """Subtrai o segundo n√∫mero do primeiro."""
    logger.info(f"Ferramenta 'subtrair_numeros' chamada com: {numero1}, {numero2}")
    resultado = calculadora.subtrair(numero1, numero2)
    return resultado

@mcp_server.tool()
async def dividir_numeros(numero1: float, numero2: float) -> float:
    """
    Divide o primeiro n√∫mero pelo segundo.

    Raises:
        ValueError: Se a divis√£o por zero for tentada.
    """
    logger.info(f"Ferramenta 'dividir_numeros' chamada com: {numero1}, {numero2}")
    try:
        # Usamos um bloco 'try...except' para tratar erros de forma segura.
        # Se o c√≥digo dentro do 'try' falhar, o bloco 'except' √© executado,
        # impedindo que o servidor inteiro trave.
        resultado = calculadora.dividir(numero1, numero2)
        return resultado
    except ValueError as e:
        # Se ocorrer uma divis√£o por zero, nossa calculadora gera um 'ValueError'.
        # N√≥s o capturamos, registramos o erro e o "re-levantamos" (raise).
        # Isso informa ao MCP e ao Gemini que a opera√ß√£o falhou por um motivo espec√≠fico.
        logger.error(f"Erro na divis√£o: {e}")
        raise e

@mcp_server.tool()
async def info_calculadora() -> str:
    """Retorna uma string com informa√ß√µes sobre as opera√ß√µes dispon√≠veis."""
    logger.info("Ferramenta 'info_calculadora' chamada")
    info = calculadora.info()
    return info

# --- 5. FUN√á√ÉO PRINCIPAL E DE TESTE ---

# Esta fun√ß√£o 'main' agora √© SINCRONA (usa 'def' e n√£o 'async def').
# A raz√£o √© que 'mcp_server.run()' √© uma fun√ß√£o "bloqueante": ela mesma
# cria e gerencia o loop de eventos e s√≥ termina quando o servidor √© fechado.
# A nossa tarefa √© apenas prepar√°-la e cham√°-la.
def main():
    """
    Fun√ß√£o principal que configura e inicia o servidor MCP.
    """
    logger.info("Iniciando servidor MCP da calculadora...")

    # Imprimimos um cabe√ßalho bonito no console para o usu√°rio saber que o servidor iniciou.
    print("=" * 60)
    print("SERVIDOR MCP DA CALCULADORA")
    print("=" * 60)
    print("Servidor iniciado e aguardando conex√µes do Gemini CLI...")
    print("Para parar o servidor, pressione Ctrl+C no terminal.")
    print("=" * 60)

    try:
        # Esta √© a linha que efetivamente inicia o servidor.
        # A chamada √© direta, SEM 'await'. A partir deste ponto, o controle do
        # programa √© entregue √† biblioteca MCP, que ficar√° escutando por
        # solicita√ß√µes at√© que o processo seja interrompido (com Ctrl+C).
        mcp_server.run(transport="stdio")

    except KeyboardInterrupt:
        # Este bloco √© executado se o usu√°rio pressionar Ctrl+C no terminal.
        logger.info("üõë Servidor MCP interrompido pelo usu√°rio.")
        print("\nüõë Servidor MCP parado com sucesso!")
    except Exception as e:
        logger.error(f"‚ùå Erro inesperado no servidor MCP: {e}")
        print(f"\n‚ùå Erro no servidor: {e}")
        raise e

def testar_servidor():
    """
    Uma fun√ß√£o de diagn√≥stico simples para verificar se a configura√ß√£o est√° correta
    sem precisar iniciar o servidor de fato.
    """
    print("üß™ Testando configura√ß√£o do servidor MCP...")
    try:
        CalculadoraSimples()
        print("‚úÖ Inst√¢ncia da Calculadora criada com sucesso.")
        FastMCP("teste")
        print("‚úÖ Inst√¢ncia do Servidor MCP criada com sucesso.")
        print("\nüéâ Teste b√°sico conclu√≠do com sucesso!")
        print("üí° Para iniciar o servidor de verdade, execute: python servidor_mcp.py")
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")

# --- 6. PONTO DE ENTRADA DO SCRIPT ---
# Este bloco de c√≥digo s√≥ √© executado quando o arquivo √© chamado diretamente
# pelo terminal (ex: `python servidor_mcp.py`).

# A vari√°vel especial `__name__` s√≥ √© igual a `"__main__"` neste cen√°rio.
# Isso impede que o servidor inicie caso este arquivo seja importado por outro.
if __name__ == "__main__":
    # Verificamos se foi passado um argumento na linha de comando.
    # `sys.argv` √© a lista de argumentos. `sys.argv[0]` √© sempre o nome do script.
    if len(sys.argv) > 1 and sys.argv[1] == "test":
        # Se o usu√°rio rodou `python servidor_mcp.py test`, chamamos a fun√ß√£o de teste.
        testar_servidor()
    else:
        # Caso contr√°rio (execu√ß√£o normal), chamamos a fun√ß√£o principal diretamente.
        # N√£o usamos mais 'asyncio.run()' porque, como explicado acima,
        # a biblioteca MCP cuida de todo o gerenciamento ass√≠ncrono.
        main()